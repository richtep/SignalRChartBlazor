@page "/chartui"
@using  Microsoft.AspNetCore.SignalR.Client;
@using SharedModels
@inject IJSRuntime _js
@inject HttpCaller.MarketDataCaller _service;



<h3>Chart Component</h3>

<div>
    <div class="container">
    <table class="table table-bordered table-striped">
        <tbody>
            <tr>
                <td>
                    <button class="btn btn-success"
                    @onclick="@_generateLineChartTask">Line Chart</button>
                </td>
                 <td>
                    <button class="btn btn-danger" 
                    @onclick="@_generateBarChartTask">Bar Chart</button>
                </td>
            </tr>
        </tbody>
    </table>
    <div id="market"></div>
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Company Name</th>
                <th>Volume</th>
            </tr>
        </thead>
        <tbody>
           @foreach (var item in MarketData)
           {
               <tr>
                   <td>@item.CompanyName</td>
                   <td>@item.Volume</td>
               </tr>
           }
        </tbody>
    </table>
    <hr/>
    <div class="container">
        @_connectionStatusMessage
    </div>
</div>
</div>


@code {
    private HubConnection _hubConn;
    private string _connectionStatusMessage;
    public List<Market> MarketData = new (); 
    public List<Market> MarketReceivedData = new (); 


    private  List<string> _xSource;
    private  List<int> _ySource;
    private List<object> _source; 

    protected override async Task OnInitializedAsync()
    {

        _xSource = new List<string>();
        _ySource = new List<int>();
        _source = new List<object>();  

        await _service.GetMarketEndpoint();
        await Start();
         
    }


    private async Task Start()
    {
        _hubConn = new HubConnectionBuilder().WithUrl("https://localhost:7193/marketdata").Build();
        await _hubConn.StartAsync();

        _connectionStatusMessage = _hubConn.State == HubConnectionState.Connected ? "Connection is established Successfully..." : "Connection is not established...";
    }

    private void MarketDataListener(string chartType)
    {
        _hubConn.On<List<Market>>("SendMarketStatusData", async data =>
        {
            MarketData = new List<Market>(); 
            foreach (var item in data)
            {
                Console.WriteLine($"Company Name: {item.CompanyName}, Volume: {item.Volume}");
                _xSource.Add(item.CompanyName);
                _ySource.Add(item.Volume);
            }

            _source.Add(_ySource);
            _source.Add(_xSource);
            
            MarketData = data;

            StateHasChanged();
            await _js.InvokeAsync<object>(chartType, _source.ToArray());
            _xSource.Clear();
            _ySource.Clear();
        });
    }

    private void ReceivedMarketDataListener()
    {
        _hubConn?.On<List<Market>>("CommunicateMarketData", data =>
        {
            MarketReceivedData = data;
            StateHasChanged();
        });
    }

 
    public async Task Dispose() => await _hubConn.DisposeAsync();
    
    async Task _generateLineChartTask()
    {
        MarketDataListener("marketLineChart");
        ReceivedMarketDataListener();
        await _service.GetMarketDataAsync();
    }
     async Task _generateBarChartTask()
    {
      MarketDataListener("marketBarChart"); 
      ReceivedMarketDataListener();
      await _service.GetMarketDataAsync();
    }
}
