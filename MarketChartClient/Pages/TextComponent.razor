@page "/labeltext"
@using  Microsoft.AspNetCore.SignalR.Client;
@using SharedModels
@inject IJSRuntime _js
@inject HttpCaller.MarketDataCaller _service;



<h3>Chart Component</h3>

<div>
    <div class="container">
        <table class="table table-bordered table-striped">
            <tbody>
            <tr>
                <td>
                    <button class="btn btn-success"
                            @onclick="@_readLabelTextTask">Read Label Text</button>
                </td>
                 
            </tr>
            </tbody>
        </table>
        
        
        <br><br><br><br>
        
        <label>@ReceivedLabelText</label>

        
        <!-- 
        <div id="market"></div>
        <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Company Name</th>
                <th>Volume</th>
            </tr>
        </thead>
        <tbody>
           @foreach (var item in MarketData)
           {
               <tr>
                   <td>@item.CompanyName</td>
                   <td>@item.Volume</td>
               </tr>
           }
        </tbody>
        </table>
        -->
    <hr/>
    <div class="container">
        @_connectionStatusMessage
    </div>
</div>
</div>


@code {
    private HubConnection _hubConn;
    private string _connectionStatusMessage;
    public List<Market> MarketData = new (); 
    public List<Market> MarketReceivedData = new ();

    public string ReceivedLabelText = "initialText";

    
    protected override async Task OnInitializedAsync()
    {
        
        await _service.GetLabelText();
        await Start();
    }


    private async Task Start()
    {
        _hubConn = new HubConnectionBuilder().WithUrl("https://localhost:7193/labelText").Build();
        await _hubConn.StartAsync();

        _connectionStatusMessage = _hubConn.State == HubConnectionState.Connected ? "Connection is established Successfully..." : "Connection is not established...";
    }

    private void LabelTextListener()
    {
        _hubConn.On<string>("SendLabelText",  data =>
        {
            ReceivedLabelText = data;
            StateHasChanged();
        });
    }

    private void ReceivedLabelTextListener()
    {
        _hubConn?.On<string>("CommunicateLabelText", data =>
        {
            ReceivedLabelText = data;
            StateHasChanged();
        });
    }

 
    public async Task Dispose() => await _hubConn.DisposeAsync();
    
    async Task _readLabelTextTask()
    {
        LabelTextListener();
        ReceivedLabelTextListener();
        await _service.GetLabelTextAsync();
    }
   
}
